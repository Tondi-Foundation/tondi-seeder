syntax = "proto3";

package tondi_seeder;

// DNS seeder service definition
service TondiSeederService {
    // Get address list
    rpc GetAddresses(GetAddressesRequest) returns (GetAddressesResponse);
    
    // Get statistics
    rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
    
    // Get address statistics
    rpc GetAddressStats(GetAddressStatsRequest) returns (GetAddressStatsResponse);
    
    // Health check
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Request message
message GetAddressesRequest {
    uint32 limit = 1;           // Limit on number of addresses to return
    bool include_ipv4 = 2;      // Whether to include IPv4 addresses
    bool include_ipv6 = 3;      // Whether to include IPv6 addresses
    string subnetwork_id = 4;   // Optional subnetwork ID filter
}

message GetStatsRequest {}

message GetAddressStatsRequest {}

message HealthCheckRequest {}

// Response message
message GetAddressesResponse {
    repeated NetAddress addresses = 1;
    uint64 total_count = 2;
}

message GetStatsResponse {
    uint64 total_nodes = 1;
    uint64 active_nodes = 2;
    uint64 failed_connections = 3;
    uint64 successful_connections = 4;
    uint64 last_update = 5;
    string uptime = 6;
}

message GetAddressStatsResponse {
    uint64 total_addresses = 1;
    uint64 ipv4_addresses = 2;
    uint64 ipv6_addresses = 3;
    uint64 good_addresses = 4;
    uint64 stale_addresses = 5;
    uint64 timestamp = 6;
}

message HealthCheckResponse {
    enum Status {
        SERVING = 0;
        NOT_SERVING = 1;
        SERVICE_UNKNOWN = 2;
    }
    Status status = 1;
    string message = 2;
}

// Data types
message NetAddress {
    string ip = 1;
    uint32 port = 2;
    uint64 last_seen = 3;
    string user_agent = 4;
    uint32 protocol_version = 5;
}
